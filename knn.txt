knn
1.plt.figure(figsize=(12,9))
  sns.scatterplot(data=X)
  plt.show()
2.plt.figure(figsize=(12,9))
  sns.boxplot(data=X)
  plt.show()
3.plt.figure(figsize=(12,9))
  sns.heatmap(data=X)
  plt.show()

---------------------------------------------------------------------

handle missing values

import pandas as pd
from sklearn.datasets import load_iris
from sklearn.impute import SimpleImputer

# Load the Iris dataset
iris = load_iris()
data = iris.data
target = iris.target

# Introduce missing values randomly (adjust 'seed' for different patterns)
import numpy as np
np.random.seed(10)  # Set seed for reproducible randomness
missing_rate = 0.2  # Adjust this to control the percentage of missing values
data[np.random.rand(data.shape[0], data.shape[1]) < missing_rate] = np.nan

# Create pandas DataFrame
df = pd.DataFrame(data, columns=iris.feature_names)
df['target'] = target

# Check for missing values before imputation
print("Missing values before imputation:")
print(df.isnull().sum())

# Impute missing values with mean strategy
imputer = SimpleImputer(strategy='mean')
df = pd.DataFrame(imputer.fit_transform(df))

# Check for missing values after imputation
print("Missing values after imputation:")
print(df.isnull().sum())

# Now you have a dataset with handled missing values (replaced by mean)
print(df.head())  # Print the first few rows after imputation

-------------------------------------------------------------------------
k-means 
K-means clustering is an unsupervised machine learning algorithm that partitions a dataset into k distinct, non-overlapping clusters based on feature similarity.
from sklearn.cluster import KMeans
wcss = []  #empty list
for i in range(1,16):  #finding k value
    kmeans = KMeans(n_clusters=i,random_state=1)
    kmeans.fit(x)
    wcss.append(kmeans.inertia_)
import matplotlib.pyplot as plt
plt.plot(range(1,16),wcss)
plt.title("Elbow Method")
plt.xlabel("No. of clusters")
plt.ylabel("WCSS")
building the model
kmeans = KMeans(n_clusters=3,random_state=1)
y_predict = kmeans.fit_predict(x)
y_predict
change the values of the clusters randomly
plt.scatter(x[y_predict == 0,0], x[y_predict == 0,1],c='red',label='First Cluster')
plt.scatter(x[y_predict == 1,0], x[y_predict == 1,1],c='blue',label='Second  Cluster')
plt.scatter(x[y_predict == 2,0], x[y_predict == 2,1],c='green',label='Third Cluster')
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],c='yellow',label='Centroid')
plt.xlabel('Sepal_Length')
plt.ylabel('Sepal_Width')
plt.legend()

---------------------------------------------------------------------------
employee data set problem


import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Generate synthetic employee data
np.random.seed(42)
num_employees = 100
employee_data = {
    'Age': np.random.randint(20, 65, num_employees),
    'Salary': np.random.randint(30000, 120000, num_employees),
    'Years of Experience': np.random.randint(1, 40, num_employees),
    'Performance Score': np.random.randint(1, 10, num_employees)
}
employees = pd.DataFrame(employee_data)
employees.head()
employees.head(20)